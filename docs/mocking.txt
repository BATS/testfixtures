Mocking out objects and methods
===============================

Mocking is the process of replacing chunks of complex functionality
that aren't the subject of the test with mock objects that allow you
to check that the mocked out functionality is being used as expected. 

In this way, you can break down testing of a complicated set of
interacting components into testing of each individual component,
checking that is does the right things with the other components
around it.

There are many implementations of mock objects in the python work. An
excellent example and the one recommended for use with TestFixtures is
the excellent Mock package: http://pypi.python.org/pypi/mock/

Methods of replacement
----------------------

TestFixtures provides three different methods of mocking out
functionality that can be used to replace objects functions, classes
or even individual methods on a class. Consider the following module:

.. topic:: testfixtures.tests.sample1
   :class: module

   .. literalinclude:: ../testfixtures/tests/sample1.py
      :pyobject: X

.. do the import quietly

  >>> from testfixtures.tests.sample1 import X

We want to mock out the ``y`` method of the ``X`` class, with,
for example, the following function: 

.. code-block:: python

  def mock_y(self):
       return 'mock y'

The context manager
~~~~~~~~~~~~~~~~~~~

If you're using a version of Python where the ``with`` keyword is
available, the context manager provided by TestFixtures can be used:

.. code-block:: python

  from testfixtures import Replacer
  
  def test_function():
      with Replacer() as r:
          r.replace('testfixtures.tests.sample1.X.y',mock_y)
          print X().y()

For the duration of the ``with`` block, the replacement is used:

>>> test_function()
mock y

The decorator
~~~~~~~~~~~~~

If you are working in a traditional :mod:`unittest` environment and
want to replace different things in different test functions, you may
find the decorator suits your needs better:

.. code-block:: python

  from testfixtures import replace
  
  @replace('testfixtures.tests.sample1.X.y',mock_y)
  def test_function():
      print X().y()

When using the decorator, the replacement is used for the duration of
the decorated callable's execution:

>>> test_function()
mock y

If you need to manipulate or inspect the object that's used as a
replacement, you can add an extra parameter to your function. The
decorator will see this and pass the replacement in it's place:

.. code-block:: python

  from mock import Mock
  from testfixtures import compare,replace
  
  @replace('testfixtures.tests.sample1.X.y',Mock())
  def test_function(m):
      m.return_value = 'mock y'
      print X().y()
      compare(m.call_args_list,[((), {})])

The above still resulting in the same output:

>>> test_function()
mock y

Manual usage
~~~~~~~~~~~~

If you want to replace something for the duration of a doctest or you
want to replace something for every test in a
:class:`~unittest.TestCase`, then you can use the
:class:`~testfixtures.Replacer` manually.

The instantiation and replacement are done in the ``setUp`` function
of the :class:`~unittest.TestCase` or passed to the
:class:`~doctest.DocTestSuite` constructor:

>>> from testfixtures import Replacer
>>> r = Replacer()
>>> r.replace('testfixtures.tests.sample1.X.y',mock_y)

The replacement then stays in place until removed:

>>> X().y()
'mock y'

Then, in the ``tearDown`` function
of the :class:`~unittest.TestCase` or passed to the
:class:`~doctest.DocTestSuite` constructor, the replacement is
removed:

>>> r.restore()
>>> X().y()
'original y'

Replacing more than one thing
-----------------------------

Both the :class:`~testfixtures.Replacer` and the
:func:`~testfixtures.replace` decorator can be used to replace more
than one thing at a time. For the former, this is fairly obvious:

.. code-block:: python

  def test_function():
      with Replacer() as r:
          r.replace('testfixtures.tests.sample1.X.y',Mock())
          r.replace('testfixtures.tests.sample1.X.aMethod',Mock())
          x = X()
          print x.y(),x.aMethod()

.. the result:
  
   >>> test_function()
   <mock.Mock object at ...> <mock.Mock object at ...>

For the decorator, it's less obvious but still pretty easy:

.. code-block:: python

  @replace('testfixtures.tests.sample1.X.y',Mock())
  @replace('testfixtures.tests.sample1.X.aMethod',Mock())
  def test_function(mock_y,mock_aMethod):
      x = X()
      print x.y(),x.aMethod()

.. the result:
  
   >>> test_function()
   <mock.Mock object at ...> <mock.Mock object at ...>

You'll notice that you can still get access to the replacements, even
though there are more than one of them.

Replacing things that may not be there
--------------------------------------

The following code shows a situation where ``hpy`` may or may not be
present depending on whether the ``guppy`` package is installed or
not. 


.. topic:: testfixtures.tests.sample2
   :class: module

   .. literalinclude:: ../testfixtures/tests/sample2.py
      :lines: 11-19

To test the behaviour of the code that uses ``hpy`` in both of
these cases, we need to be able to mock out both ``hpy`` and the
``guppy`` global. This is done by doing non-strict replacement, as
shown in the following :class:`~unittest.TestCase`:

.. imports

  >>> import unittest,sys
  >>> from cStringIO import StringIO

.. code-block:: python

    from testfixtures.tests.sample2 import dump

    class Tests(unittest.TestCase):

        @replace('testfixtures.tests.sample2.guppy',True)
        @replace('testfixtures.tests.sample2.hpy',Mock(),strict=False)
        def test_method(self,hpy):

            dump('somepath')

            compare(hpy.call_args_list,[((),{})])
            hpy_i = hpy.return_value
            compare(hpy_i.method_calls,[('heap',(),{})])
            h = hpy_i.heap.return_value
            compare(h.method_calls,[('stat.dump', ('somepath',),{})])

        @replace('testfixtures.tests.sample2.guppy',False)
        @replace('testfixtures.tests.sample2.hpy',Mock(),strict=False)
        def test_method_no_heapy(self,hpy):

            dump('somepath')

            compare(hpy.call_args_list,[])

.. the result:
  
   >>> suite = unittest.TestLoader().loadTestsFromTestCase(Tests)
   >>> unittest.TextTestRunner(verbosity=0,stream=StringIO()).run(suite)
   <unittest._TextTestResult run=2 errors=0 failures=0>


The :meth:`testfixtures.Replacer.replace` method also supports
non-strict replacement using the same keyword parameter.

Gotchas
-------

- Make sure you replace the object where it's used and not where it's
  defined. For example, with the following code from the
  ``testfixtures.tests.sample1`` package:

  .. literalinclude:: ../testfixtures/tests/sample1.py
     :lines: 26-28

  You might be tempted to mock things as follows:

  >>> r = Replacer()
  >>> r.replace('time.time',Mock())
  
  But this won't work:

  >>> from testfixtures.tests.sample1 import str_time
  >>> type(float(str_time()))
  <type 'float'>

  You need to replace :func:`~time.time` where it's used, not where
  it's defined:

  >>> r.replace('testfixtures.tests.sample1.time',Mock())
  >>> str_time()
  '<mock.Mock object at ...>'

  .. cleanup  
 
    >>> r.restore()
  
- You can't replace whole top level modules, and nor should you want
  to! The reason being that everything up to the last dot in the
  replacement target specified where the replacement will take place,
  and the part after the last dot is used as the name of the thing to
  be replaced:

  >>> Replacer().replace('sys',Mock())
  Traceback (most recent call last):
   ...
  ValueError: need more than 1 value to unpack

Dates and Times
---------------

Mocking also lets you perform tests involving things that you don't
normally have any control over, such as the current time and
date. TestFixtures provides three specialised mock objects to help
with this.

Dates
~~~~~

 TextFixtures provides the :func:`~testfixtures.test_date` function
 that returns a subclass of :class:`datetime.date` with a
 :meth:`~datetime.date.today` method that will return a
 consistent sequence of dates each time it is called.

This enables you to write tests for code such as the following, from
the ``testfixtures.tests.sample1`` package:

.. literalinclude:: ../testfixtures/tests/sample1.py
   :lines: 8,18,19

We use the a :class:`~testfixtures.Replacer` as follows, which could
appear in either a unit test or a doc test:

>>> from testfixtures import Replacer,test_date
>>> from testfixtures.tests.sample1 import str_today_1
>>> with Replacer() as r:
...    r.replace('testfixtures.tests.sample1.date',test_date())
...    str_today_1()
...    str_today_1()
'2001-01-01'
'2001-01-02'

If you need a specific date to be returned, you can specify it:

>>> with Replacer() as r:
...    r.replace('testfixtures.tests.sample1.date',test_date(1978,6,13))
...    str_today_1()
'1978-06-13'

If you need to test with a whole sequence of specific dates, this
can be done as follows:

>>> with Replacer() as r:
...    d = test_date(None)
...    d.add(1978,6,13)
...    d.add(2009,11,12)
...    r.replace('testfixtures.tests.sample1.date',d)
...    str_today_1()
...    str_today_1()
'1978-06-13'
'2009-11-12'
  
There are situations where people may have obtained a local
reference to the :meth:`~datetime.date.today` method, such as
the following code from the ``testfixtures.tests.sample1`` package:

.. literalinclude:: ../testfixtures/tests/sample1.py
   :lines: 8,21-24

In this case, you need to be careful with the replacement:

>>> from testfixtures import Replacer,test_date
>>> from testfixtures.tests.sample1 import str_today_2
>>> with Replacer() as r:
...    r.replace('testfixtures.tests.sample1.today',test_date().today)
...    str_today_2()
'2001-01-01'

Datetimes
~~~~~~~~~

TextFixtures provides the :func:`~testfixtures.test_datetime`
function that returns a subclass of :class:`datetime.datetime` with
a :meth:`~datetime.datetime.now` method that will return a
consistent sequence of :obj:`~datetime.datetime` objects each time
it is called. 

This enables you to write tests for code such as the following, from
the ``testfixtures.tests.sample1`` package:

.. literalinclude:: ../testfixtures/tests/sample1.py
   :lines: 8,10,11

We use the a :class:`~testfixtures.Replacer` as follows, which could
appear in either a unit test or a doc test:

>>> from testfixtures import Replacer,test_datetime
>>> from testfixtures.tests.sample1 import str_now_1
>>> with Replacer() as r:
...    r.replace('testfixtures.tests.sample1.datetime',test_datetime())
...    str_now_1()
...    str_now_1()
'2001-01-01 00:00:00'
'2001-01-01 00:00:10'

If you need a specific datetime to be returned, you can specify it:

>>> with Replacer() as r:
...    r.replace('testfixtures.tests.sample1.datetime',test_datetime(1978,6,13,1,2,3))
...    str_now_1()
'1978-06-13 01:02:03'

If you need to test with a whole sequence of specific datetimes,
this can be done as follows:

>>> with Replacer() as r:
...    d = test_datetime(None)
...    d.add(1978,6,13,16,0,1)
...    d.add(2009,11,12,11,41,20)
...    r.replace('testfixtures.tests.sample1.datetime',d)
...    str_now_1()
...    str_now_1()
'1978-06-13 16:00:01'
'2009-11-12 11:41:20'
  
There are situations where people may have obtained a local
reference to the :meth:`~datetime.datetime.now` method, such
as the following code from the ``testfixtures.tests.sample1`` package:

.. literalinclude:: ../testfixtures/tests/sample1.py
   :lines: 8,13-16

In this case, you need to be careful with the replacement:

>>> from testfixtures import Replacer,test_datetime
>>> from testfixtures.tests.sample1 import str_now_2
>>> with Replacer() as r:
...    r.replace('testfixtures.tests.sample1.now',test_datetime().now)
...    str_now_2()
'2001-01-01 00:00:00'

Times
~~~~~

TextFixtures provides the :func:`~testfixtures.test_time`
function that, when called, returns a replacement for the
:func:`time.time` function.

This enables you to write tests for code such as the following, from
the ``testfixtures.tests.sample1`` package:

.. literalinclude:: ../testfixtures/tests/sample1.py
   :lines: 26-28

We use the a :class:`~testfixtures.Replacer` as follows, which could
appear in either a unit test or a doc test:

>>> from testfixtures import Replacer,test_time
>>> from testfixtures.tests.sample1 import str_time
>>> with Replacer() as r:
...    r.replace('testfixtures.tests.sample1.time',test_time())
...    str_time()
...    str_time()
'978307200.0'
'978307201.0'

If you need an integer representing a specific time to be returned,
you can specify it:

>>> with Replacer() as r:
...    r.replace('testfixtures.tests.sample1.time',test_time(1978,6,13,1,2,3))
...    str_time()
'266544123.0'

If you need to test with a whole sequence of specific timestamps,
this can be done as follows:

>>> with Replacer() as r:
...    t = test_time(None)
...    t.add(1978,6,13,16,0,1)
...    t.add(2009,11,12,11,41,20)
...    r.replace('testfixtures.tests.sample1.time',t)
...    str_time()
...    str_time()
'266598001.0'
'1258026080.0'
